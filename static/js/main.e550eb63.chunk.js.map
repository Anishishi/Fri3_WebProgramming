{"version":3,"sources":["index.js"],"names":["NumBtn","props","className","onClick","n","Numbers","Component","Square","id","String","idInt","value","Board","renderRow","start","end","rowSquares","i","push","renderSquare","this","squares","React","InitializeGame","Game","initialSquares","state","Array","fill","filledNum","selected","slice","cnt","countFill","setState","newSqueares","array","length","j","Math","floor","random","tmp","ind","makeProblem","document","getElementById","style","backgroundColor","status","isCorrect","h","lines","w","linesCandidate","calculateWinner","handleClick","handleInit","onClickHandlerNum","square","ReactDOM","render"],"mappings":"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","file":"static/js/main.e550eb63.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction NumBtn(props) {\n    return (\n        <button className=\"numbtn\" onClick={props.onClick}>{props.n}</button>\n    )\n};\n\n// 1~9の数字を選択する用のボード\nclass Numbers extends Component {\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <NumBtn n={1} onClick={() => this.props.onClick(1)}/>\n                    <NumBtn n={2} onClick={() => this.props.onClick(2)}/>\n                    <NumBtn n={3} onClick={() => this.props.onClick(3)}/>\n                </div>\n                <div>\n                    <NumBtn n={4} onClick={() => this.props.onClick(4)}/>\n                    <NumBtn n={5} onClick={() => this.props.onClick(5)}/>\n                    <NumBtn n={6} onClick={() => this.props.onClick(6)}/>\n                </div>\n                <div>\n                    <NumBtn n={7} onClick={() => this.props.onClick(7)}/>\n                    <NumBtn n={8} onClick={() => this.props.onClick(8)}/>\n                    <NumBtn n={9} onClick={() => this.props.onClick(9)}/>\n                </div>\n                <div>\n                    <NumBtn n={\"削除\"} onClick={() => this.props.onClick(\"\")}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction Square(props) {\n    return (\n        <button id={String(props.idInt)} className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    // 格子の要素を作成する\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                idInt={i}\n            />\n        );\n    }\n\n    // 格子の列要素をfor文で作成する．\n    renderRow = (start, end) => {\n\t\tconst rowSquares = [];\n\t\tfor (let i = start; i <= end; i++) {\n\t\t\trowSquares.push(this.renderSquare(i));\n\t\t}\n\t\treturn rowSquares;\n\t}\n\n    render() {\n        return (\n        // マス目の描画\n        <div>\n            <div className=\"board-row\">\n                {this.renderRow(0,8)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(9,17)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(18,26)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(27,35)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(36,44)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(45,53)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(54,62)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(63,71)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderRow(72,80)}\n            </div>\n        </div>\n        );\n    }\n}\n\n// ゲーム初期化用\nclass InitializeGame extends React.Component {\n    \n    render() {\n        return (\n            <div>\n                <button className=\"btn\" onClick={this.props.onClick}>Start Game</button>\n            </div>\n        )\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(81).fill(\"\"),\n            filledNum: 0,\n            selected: -1,\n        };\n    }\n\n    // ひとまずハードコーディングする．\n    initialSquares = [5, 3, 4, 6, 7, 8, 9, 1, 2,\n        6, 7, 2, 1, 9, 5, 3, 4, 8,\n        1, 9, 8, 3, 4, 2, 5, 6, 7,\n        8, 5, 9, 7, 6, 1, 4, 2, 3,\n        4, 2, 6, 8, 5, 3, 7, 9, 1,\n        7, 1, 3, 9, 2, 4, 8, 5, 6,\n        9, 6, 1, 5, 3, 7, 2, 8, 4,\n        2, 8, 7, 4, 1, 9, 6, 3, 5,\n        3, 4, 5, 2, 8, 6, 1, 7, 9];\n\n    // 数字を書き換えるための関数\n    onClickHandlerNum(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.selected === -1) {\n            const cnt = countFill(this.state.squares);\n            this.setState({filledNum: cnt});\n            return;\n        }\n        squares[this.state.selected] = i\n        const cnt = countFill(squares);\n        this.setState({\n            squares: squares,\n            filledNum: cnt,\n        });\n    }\n\n    // 初期化するためのハンドラー\n    handleInit() {\n        const newSqueares = makeProblem(this.initialSquares.slice());\n        this.setState({squares: newSqueares});\n    }\n\n    // 数字を入れるマスを決める\n    handleClick(i) {\n        if (i === this.state.selected) {\n            return;\n        }\n        if (!(i === -1)) {\n            document.getElementById(String(i)).style.backgroundColor = \"orange\";\n        }\n        if (!(this.state.selected === -1)) {\n            document.getElementById(String(this.state.selected)).style.backgroundColor = \"white\";\n        }\n        this.setState({\n            selected: i,\n        });\n    }\n\n    // rendering用\n    render() {\n        const isCorrect = calculateWinner(this.state.squares);\n        let status;\n        if (isCorrect && this.state.filledNum === 81){\n            status = \"congratulations!!!\"\n        } else if (isCorrect){\n            status = \"Filled: \"+String(this.state.filledNum)+\"\\nNow correct\";\n        }else{\n            status = \"Something wrong...!\"\n        }\n\n        return (\n            <div>\n                <h2 className=\"title\">Sudoku</h2>\n                <div className=\"game\">\n                    {/* 数独のボード */}\n                    <div className=\"game-board\">\n                    <Board\n                        squares={this.state.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                    {/* リセットする */}\n                    <InitializeGame\n                        onClick={(i) => this.handleInit(i)}\n                    />\n                    {/* ゲームの進行状況 */}\n                    </div>\n                    <div className=\"game-info\">\n                    <div>{status}</div>\n                    {/* 1~9の数字を選択する用のボード */}\n                    <Numbers\n                        squares={this.state.squares}\n                        onClick={(i) => this.onClickHandlerNum(i)}\n                    />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// 埋まっているマス目の数を数える\nfunction countFill(square) {\n    let cnt = 0;\n    for (let h=0; h<9; h++){\n        for (let w=0; w<9; w++) {\n            if (square[h*9+w] !== \"\"){\n                cnt += 1\n            }\n        }\n    }\n    return cnt\n}\n\nfunction calculateWinner(squares) {\n    // 全ての数字が正しく埋まっているかの判定\n    // 横方向\n    for (let h=0; h<9; h++) {\n        let lines = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        for (let w=0; w<9; w++){\n            if (squares[h*9+w] !== \"\") {\n                if (lines[squares[h*9+w]] ===  1) {\n                    return false\n                }else{\n                    lines[squares[h*9+w]] = 1\n                }\n            }\n        }\n    }\n    // 縦方向\n    for (let w=0; w<9; w++) {\n        let lines = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        for (let h=0; h<9; h++){\n            if (squares[h*9+w] !== \"\") {\n                if (lines[squares[h*9+w]] ===  1) {\n                    return false\n                }else{\n                    lines[squares[h*9+w]] = 1\n                }\n            }\n        }\n    }\n    // 9区画のます\n    const linesCandidate = [\n        [0, 1, 2, 9, 10, 11, 18, 19, 20],\n        [3, 4, 5, 12, 13, 14, 21, 22, 23],\n        [6, 7, 8, 15, 16, 17, 24, 25, 26],\n        [27, 28, 29, 36, 37, 38, 45, 46, 47],\n        [30, 31, 32, 39, 40, 41, 48, 49, 50],\n        [33, 34, 35, 42, 43, 44, 51, 52, 53],\n        [54, 55, 56, 63, 64, 65, 72, 73, 74],\n        [57, 58, 59, 66, 67, 68, 75, 76, 77],\n        [60, 61, 62, 69, 70, 71, 78, 79, 80]\n    ];\n    for (let i=0; i<9; i++){\n        let lines = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (let j=0; j<9; j++){\n            const ind = linesCandidate[i][j];\n            if (squares[ind] !== \"\") {\n                if (lines[squares[ind]] ===  1) {\n                    return false\n                }else{\n                    lines[squares[ind]] += 1\n                }\n            }\n        }\n    }\n    return true\n}\n\nfunction makeProblem(squares) {\n    // ランダムなindexのリストを作成する\n    var array = Array(81).fill(0);\n    for (let i = 0; i<81; i++){\n        array[i] = i\n    }\n    for(let i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n    // indexのリスト前から見ていき，そこに相当するマスの数字を消していく．簡単のためにとりあえず適当に消す．\n    // 難易度もどうなるかわからない．\n    for (let i=0; i<45; i++){\n        const ind = array[i]\n        squares[ind] = \"\"\n    }\n    return squares\n}\n\n\n\n// ========================================\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n/*\nexport Board;\nexport Game;\n*/\n"],"sourceRoot":""}